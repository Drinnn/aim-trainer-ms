// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service.proto

package protos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HighscoreClient is the client API for Highscore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HighscoreClient interface {
	SetHighscore(ctx context.Context, in *SetHighscoreRequest, opts ...grpc.CallOption) (*SetHighscoreResponse, error)
	GetHighscore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetHighscoreResponse, error)
}

type highscoreClient struct {
	cc grpc.ClientConnInterface
}

func NewHighscoreClient(cc grpc.ClientConnInterface) HighscoreClient {
	return &highscoreClient{cc}
}

func (c *highscoreClient) SetHighscore(ctx context.Context, in *SetHighscoreRequest, opts ...grpc.CallOption) (*SetHighscoreResponse, error) {
	out := new(SetHighscoreResponse)
	err := c.cc.Invoke(ctx, "/protos.Highscore/SetHighscore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highscoreClient) GetHighscore(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetHighscoreResponse, error) {
	out := new(GetHighscoreResponse)
	err := c.cc.Invoke(ctx, "/protos.Highscore/GetHighscore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HighscoreServer is the server API for Highscore service.
// All implementations should embed UnimplementedHighscoreServer
// for forward compatibility
type HighscoreServer interface {
	SetHighscore(context.Context, *SetHighscoreRequest) (*SetHighscoreResponse, error)
	GetHighscore(context.Context, *empty.Empty) (*GetHighscoreResponse, error)
}

// UnimplementedHighscoreServer should be embedded to have forward compatible implementations.
type UnimplementedHighscoreServer struct {
}

func (UnimplementedHighscoreServer) SetHighscore(context.Context, *SetHighscoreRequest) (*SetHighscoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHighscore not implemented")
}
func (UnimplementedHighscoreServer) GetHighscore(context.Context, *empty.Empty) (*GetHighscoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighscore not implemented")
}

// UnsafeHighscoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HighscoreServer will
// result in compilation errors.
type UnsafeHighscoreServer interface {
	mustEmbedUnimplementedHighscoreServer()
}

func RegisterHighscoreServer(s grpc.ServiceRegistrar, srv HighscoreServer) {
	s.RegisterService(&Highscore_ServiceDesc, srv)
}

func _Highscore_SetHighscore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHighscoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighscoreServer).SetHighscore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Highscore/SetHighscore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighscoreServer).SetHighscore(ctx, req.(*SetHighscoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Highscore_GetHighscore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighscoreServer).GetHighscore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Highscore/GetHighscore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighscoreServer).GetHighscore(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Highscore_ServiceDesc is the grpc.ServiceDesc for Highscore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Highscore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Highscore",
	HandlerType: (*HighscoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetHighscore",
			Handler:    _Highscore_SetHighscore_Handler,
		},
		{
			MethodName: "GetHighscore",
			Handler:    _Highscore_GetHighscore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
